// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SandwichBucket;

namespace SandwichBucket.Migrations
{
    [DbContext(typeof(SandwichBucketContext))]
    [Migration("20220404165257_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.15");

            modelBuilder.Entity("SandwichBucket.Models.Ingredient", b =>
                {
                    b.Property<int>("IngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("IngredientId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("SandwichBucket.Models.IngredientTag", b =>
                {
                    b.Property<int>("IngredientTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("IngredientTagId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("TagId");

                    b.ToTable("IngredientTag");
                });

            modelBuilder.Entity("SandwichBucket.Models.Sandwich", b =>
                {
                    b.Property<int>("SandwichId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("SandwichId");

                    b.ToTable("Sandwiches");
                });

            modelBuilder.Entity("SandwichBucket.Models.SandwichIngredient", b =>
                {
                    b.Property<int>("SandwichIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IngredientId")
                        .HasColumnType("int");

                    b.Property<int>("SandwichId")
                        .HasColumnType("int");

                    b.HasKey("SandwichIngredientId");

                    b.HasIndex("IngredientId");

                    b.HasIndex("SandwichId");

                    b.ToTable("SandwichesIngredients");
                });

            modelBuilder.Entity("SandwichBucket.Models.SandwichTag", b =>
                {
                    b.Property<int>("SandwichTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("SandwichId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("SandwichTagId");

                    b.HasIndex("SandwichId");

                    b.HasIndex("TagId");

                    b.ToTable("SandwitchesTags");
                });

            modelBuilder.Entity("SandwichBucket.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("SandwichBucket.Models.IngredientTag", b =>
                {
                    b.HasOne("SandwichBucket.Models.Ingredient", "Ingredient")
                        .WithMany("Tags")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SandwichBucket.Models.Tag", "Tag")
                        .WithMany("Ingredients")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SandwichBucket.Models.SandwichIngredient", b =>
                {
                    b.HasOne("SandwichBucket.Models.Ingredient", "Ingredient")
                        .WithMany("Sandwiches")
                        .HasForeignKey("IngredientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SandwichBucket.Models.Sandwich", "Sandwich")
                        .WithMany("Ingredients")
                        .HasForeignKey("SandwichId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ingredient");

                    b.Navigation("Sandwich");
                });

            modelBuilder.Entity("SandwichBucket.Models.SandwichTag", b =>
                {
                    b.HasOne("SandwichBucket.Models.Sandwich", "Sandwich")
                        .WithMany("Tags")
                        .HasForeignKey("SandwichId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SandwichBucket.Models.Tag", "Tag")
                        .WithMany("Sandwiches")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sandwich");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("SandwichBucket.Models.Ingredient", b =>
                {
                    b.Navigation("Sandwiches");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SandwichBucket.Models.Sandwich", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("SandwichBucket.Models.Tag", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Sandwiches");
                });
#pragma warning restore 612, 618
        }
    }
}
